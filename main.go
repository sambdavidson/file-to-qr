package main

import (
	"flag"
	"fmt"
	"log"
	"os"
	"path/filepath"

	"github.com/skip2/go-qrcode"
)

var (
	infile  = flag.String("in_file", "test_files/tiny.png", "Input file to convert to a PDF of QR codes.")
	outfile = flag.String("out_file", "", "Output PDF path and name. If empty, will be written to `./out` and name will be autogenerated.")
	tmpdir  = flag.String("temp_dir", filepath.Join(os.TempDir(), "file-to-qr"), "Temporary directory where created QR code images are written to disk before being inserted into the PDF.")
)

func main() {
	flag.Parse()

	f, err := os.Open(*infile)
	if err != nil {
		log.Fatal(err)
	}
	o, err := Split(f, 2953)
	if err != nil {
		log.Fatal(err)
	}

	log.Printf("Number of QR codes: %d\n", len(o))
	log.Printf("Using temporary directory: %s", *tmpdir)
	err = os.MkdirAll(*tmpdir, os.ModeDir)
	if err != nil {
		log.Fatal(err)
	}

	var imagePaths []string
	for i, chunk := range o {
		qr, err := qrcode.New(chunk.Marshal(), qrcode.Low)
		if err != nil {
			log.Fatal(err)
		}

		imgPath := filepath.Join(*tmpdir, fmt.Sprintf("%s_qr_%d.png", chunk.uuid[:8], i))
		err = qr.WriteFile(-1, imgPath)
		if err != nil {
			log.Fatal(err)
		}
		imagePaths = append(imagePaths, imgPath)
	}
	pdf, err := imagesToPDF(imagePaths)
	if err != nil {
		log.Fatal(err)
	}

	log.Printf("Number of PDF pages: %d\n", pdf.PageCount())

	os.MkdirAll(filepath.Dir(outPath(f)), os.ModeDir)
	log.Printf("Writing PDF to path: %s\n", outPath(f))
	err = pdf.OutputFileAndClose(outPath(f))
	if err != nil {
		log.Fatal(err)
	}

}

func outPath(f *os.File) string {
	if *outfile == "" {
		return filepath.Join("out", fmt.Sprintf("qr_of_%s.pdf", filepath.Base(f.Name())))
	}

	return *outfile
}
